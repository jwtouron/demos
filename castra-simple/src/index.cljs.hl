(page "index.html"
  (:require [app.rpc :as rpc]))

(defc= random rpc/random-number)

(rpc/init)

(def number (cell nil))
(def numbers (cell []))

(html
  (head
    (link :rel "stylesheet" :type "text/css" :href "css/main.css"))
  (body
    ;;(h1 (text "Hello, Hoplon and Castra World! ~{random}"))
    (h1 (text "Hello, Hoplon and Castra World!"))
    (input :value number :change #(reset! number @%))
    (button :click #(swap! numbers conj @number) (text "Add one"))
    (ul
      (loop-tpl :bindings [n numbers]
        (li (cell= (str n)))))
    (span
      (button :click #(apply rpc/add-numbers @numbers) (text "Send"))
      (text "  ~{rpc/add-result}"))

    (h1 "File Upload")
    (form :submit #(let [file (-> "file-upload" js/document.getElementById .-files (aget 0)) ; not checking that something selected
                         r (js/FileReader.)]
                     (set! (.-onload r)
                           (fn []
                             (let [contents (js/Uint8Array. (.-result r) 0 (.-byteLength (.-result r)))]
                               ;; should maybe assert here that (.-size file) matches (.-byteLength (.-result r))
                               (rpc/upload-file {:size (.-size file)
                                                 :bytes contents
                                                 :name (.-name file)}))))
                     (.readAsArrayBuffer r file))
      (input :type "file" :id "file-upload")
      (input :type "submit" "Submit"))))
